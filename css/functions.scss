@use 'colors';

// Encode an SVG for inline use
@function svg-encode($svg) {
  @if not str-index($svg, ' xmlns="http://www.w3.org/2000/svg"') {
    $svg: str-insert($svg, ' xmlns="http://www.w3.org/2000/svg"', 5);
  }

  // Encode characters
  $encode: (
          '"': "%22",
          "#": "%23",
          "%": "%25",
          "<": "%3C",
          ">": "%3E",
          "{": "%7B",
          "}": "%7D",
  );

  $string: "";
  $character: "";

  @for $i from 1 through str-length($svg) {
    $character: str-slice($svg, $i, $i);
    @if index(map-keys($encode), $character) {
      $character: map-get($encode, $character);

    }

    $string: $string + $character;
  }

  @return url("data:image/svg+xml,#{$string}");
}


@mixin sizer($width: 0, $height: 0) {
  width: $width;
  height: $height;
}


@mixin font-shadow($color: colors.$color-dark, $x: 2px, $y: 2px, $blur: 3px) {
  text-shadow: $color $x $y $blur;
}

@mixin shadow($color: colors.$color-dark, $x: 2px, $y: 2px, $blur: 3px) {
  filter: drop-shadow($x $y $blur $color);
}
